{% extends 'base.html.twig' %}

{% block title %}Parcours Page 3{% endblock %}

{% block content %}

    <script src="{{ asset('js/pannellum.js') }}"></script>
    <link rel="stylesheet" href="{{ asset('css/pannellum.css') }}">

    <body>
    <h1>√âtape 3 : Cliquer, dans le bon ordre, sur les 2 endroits o√π placer les extr√©mit√©s du piquet de MALT</h1>

    <div id="response-container">
        <span id="message-box"></span>
        <img id="response-image" src="{{ asset('images/imageMALT.jpg') }}" class="overlay-image" style="display: none;">
        <a href="{{ path('app_page4') }}" id="next-button" class="next-button" style="display: none;">Passer √† l'√©tape suivante</a>
    </div>

    <div id="panorama-container">
        <div id="panorama" style="width: 100%; height: 800px;"></div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let clickedCircles = [];

            let viewer = pannellum.viewer('panorama', {
                "type": "equirectangular",
                "panorama": "{{ asset('models/model.jpg') }}",
                "autoLoad": true,
                "yaw": 0,
                "pitch": 0,
                "hfov": 100,
                "mouseZoom": false,
                "disableZoom": true,
                "showControls": false,
                "keyboardZoom": false,
                "hotSpots": [
                    { "pitch": 2, "yaw": 13, "type": "custom", "cssClass": "hotspot-circle", "id": "circle1", "createTooltipFunc": createHotspot, "createTooltipArgs": { id: "circle1" }},
                    { "pitch": 25, "yaw": 14, "type": "custom", "cssClass": "hotspot-circle", "id": "circle2", "createTooltipFunc": createHotspot, "createTooltipArgs": { id: "circle2" }},
                    { "pitch": 5, "yaw": 0, "type": "custom", "cssClass": "hotspot-circle", "id": "circle3", "createTooltipFunc": createHotspot, "createTooltipArgs": { id: "circle3" }},
                    { "pitch": 3, "yaw": -5, "type": "custom", "cssClass": "hotspot-circle", "id": "circle4", "createTooltipFunc": createHotspot, "createTooltipArgs": { id: "circle4" }},
                    { "pitch": 0, "yaw": 20, "type": "custom", "cssClass": "hotspot-circle", "id": "circle5", "createTooltipFunc": createHotspot, "createTooltipArgs": { id: "circle5" }},
                    { "pitch": 5, "yaw": 30, "type": "custom", "cssClass": "hotspot-circle", "id": "circle6", "createTooltipFunc": createHotspot, "createTooltipArgs": { id: "circle6" }},

                    {
                        "pitch": 10,
                        "yaw": -15,
                        "type": "custom",
                        "cssClass": "static-image",
                        "createTooltipFunc": createStaticImage,
                        "createTooltipArgs": {}
                    }
                ]
            });

            /* Fonction pour g√©rer les clics sur les cercles */
            function createHotspot(hotSpotDiv, args) {
                hotSpotDiv.addEventListener("click", function () {
                    let circleId = args.id;
                    hotSpotDiv.setAttribute("id", circleId);
                    console.log("Clic d√©tect√© sur :", circleId);

                    if (clickedCircles.length < 2) {
                        clickedCircles.push(circleId);
                        hotSpotDiv.classList.add("clicked"); // Remplit le cercle
                    }

                    if (clickedCircles.length === 2) {
                        checkSelection();
                    }
                });
            }

            /* V√©rifie si l'utilisateur a cliqu√© sur le bon ordre */
            function checkSelection() {
                console.log("Cercles cliqu√©s :", clickedCircles);
                if (clickedCircles[0] === "circle1" && clickedCircles[1] === "circle2") {
                    showMessage("Correct", "green");
                    updateEtape3();
                } else {
                    showMessage("Incorrect", "red");
                }
            }

            /* Fonction pour afficher le message + l'image + le bouton */
            function showMessage(text, color) {
                let messageBox = document.getElementById("message-box");
                let responseImage = document.getElementById("response-image");
                let nextButton = document.getElementById("next-button");

                messageBox.textContent = text;
                messageBox.style.color = color;
                messageBox.style.fontSize = "24px";
                messageBox.style.fontWeight = "bold";
                messageBox.style.marginTop = "10px";
                messageBox.style.display = "block";

                responseImage.style.display = "block"; // Afficher l'image
                nextButton.style.display = "inline-block"; // Afficher le bouton
            }

            /* Mise √† jour du score si l'utilisateur a bien cliqu√© */
            function updateEtape3() {
                fetch("{{ path('update_score') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    body: JSON.stringify({ etape: "etape3" })
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log("Score mis √† jour :", data.score);
                    })
                    .catch(error => console.error("Erreur de mise √† jour du score :", error));
            }

            /* Fonction pour afficher l'image fixe */
            function createStaticImage(hotSpotDiv) {
                hotSpotDiv.classList.add('static-container');

                let image = document.createElement("img");
                image.src = "{{ asset('images/piquetMALT.png') }}";
                image.classList.add("piquet-image");
                hotSpotDiv.appendChild(image);
            }

        });
    </script>

    </body>

    <style>
        /* Cercles bleus vides */
        .hotspot-circle {
            width: 40px;
            height: 40px;
            border: 3px solid blue;
            background-color: transparent;
            border-radius: 50%;
            position: absolute;
            transform: translate(-50%, -50%);
            pointer-events: auto;
            cursor: pointer;
        }

        /* Style pour les cercles cliqu√©s */
        .hotspot-circle.clicked {
            background-color: blue !important; /* Remplit le cercle */
        }

        /* Superposition de l'image √† gauche sur le panorama */
        .overlay-image {
            position: absolute;
            top: 300px;    /*Positionnement vertical, augmenter pour d√©caler vers le bas */
            left: 30px;  /* Positionnement horizontal, augmenter pour d√©caler vers la droite */
            width: 300px;  /* Largeur de l'image */
            z-index: 100;
            display: none;
            border: 2px solid black;
            background-color: white;
            padding: 5px;
            box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.5);
        }

        /* Conteneur de l‚Äôimage fixe */
        .static-container {
            position: absolute;
            transform-origin: center;
        }

        /* Image fixe plus grande */
        .piquet-image {
            width: 250px;
            height: auto;
        }

    </style>

    {#-------------------------------------------------------#}
    {#  SECONDAIRE  emp√™cher le clic droit mene sur Pannellum#}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let panoramaElement = document.getElementById("panorama");

            // Bloquer compl√®tement le menu contextuel Panellum
            document.addEventListener("contextmenu", function (event) {
                if (event.target.closest("#panorama")) {
                    event.preventDefault();
                }
            });

            // V√©rifier et supprimer le lien contextuel Panellum apr√®s son chargement
            function removePannellumContextMenu() {
                let pannellumMenu = document.querySelector(".pnlm-about-msg");
                if (pannellumMenu) {
                    pannellumMenu.remove(); // üîπ Supprime l'√©l√©ment affichant le lien Panellum
                }
            }

            // Attendre le chargement de Panellum et supprimer le menu
            setTimeout(removePannellumContextMenu, 500); // üîπ D√©lai pour s'assurer que Panellum est bien charg√©

            // Surveiller les changements de DOM pour d√©tecter si Panellum r√©affiche son menu
            let observer = new MutationObserver(removePannellumContextMenu);
            observer.observe(document.body, { childList: true, subtree: true });

            // D√©sactiver tous les √©v√©nements li√©s au menu contextuel
            panoramaElement.addEventListener("mousedown", function (event) {
                if (event.button === 2) { // Clic droit
                    event.preventDefault();
                }
            });

            panoramaElement.addEventListener("mouseup", function (event) {
                if (event.button === 2) {
                    event.preventDefault();
                }
            });
        });
    </script>

{% endblock %}
