{% extends 'base.html.twig' %}

{% block title %}Parcours Page 3{% endblock %}

{% block content %}

    <script src="{{ asset('js/pannellum.js') }}"></script>
    <link rel="stylesheet" href="{{ asset('css/pannellum.css') }}">

    <body>
    <h1>√âtape 3 : Cliquer, dans le bon ordre, sur les 2 endroits o√π placer les extr√©mit√©s du piquet de MALT</h1>

    <div id="response-container">
        <span id="message-box"></span>
        <a href="{{ path('app_page4') }}" id="next-button" class="next-button" style="display: none;">Passer √† l'√©tape suivante</a>
    </div>

    {#    tableau repr√©senatnt la fiche de consignation#}
    <div class="container">
        <!-- Tableau des op√©rations -->
        <div class="parcours-table-container">
            <div class="parcours-table-title">Suivi de la consignation</div>
            <table class="parcours-table">
                <tr>
                    <th>N¬∞</th>
                    <th>Emplacement</th>
                    <th>Op√©ration</th>
                    <th>Validation</th>
                </tr>
                {% for row in tableData %}
                    <tr>
                        <td>{{ row['N¬∞'] }}</td>
                        <td>{{ row['Emplacement'] }}</td>
                        <td>{{ row['Op√©ration'] }}</td>
                        <td class="validation">
                            {% set etapeKey = 'etape' ~ row['N¬∞'] %} {# G√©n√®re "etape1", "etape2", etc. #}
                            {% if score[etapeKey] is defined %}
                                {% if score[etapeKey] == 1 %}
                                    ‚úÖ
                                {% elseif score[etapeKey] == -1 %}
                                    ‚ùå
                                {% endif %}
                            {% endif %}
                        </td>
                    </tr>
                {% endfor %}
            </table>
        </div>



        <div id="panorama-container">
            <!-- Image panoramique -->
            <div id="panorama"></div>
            <img id="response-image" src="{{ asset('images/imageMALT.jpg') }}" class="overlay-image" style="display: none;">
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let clickedCircles = [];
            let attemptDone = false; // Bloquer apr√®s un essai

            let viewer = pannellum.viewer('panorama', {
                "type": "equirectangular",
                "panorama": "{{ asset('models/model.jpg') }}",
                "autoLoad": true,
                "yaw": 0,
                "pitch": 0,
                "hfov": 100,
                "mouseZoom": false,
                "disableZoom": true,
                "showControls": false,
                "keyboardZoom": false,
                "hotSpots": [
                    { "pitch": 2, "yaw": 13, "type": "custom", "cssClass": "hotspot-circle", "id": "circle1", "createTooltipFunc": createHotspot, "createTooltipArgs": { id: "circle1" }},
                    { "pitch": 25, "yaw": 14, "type": "custom", "cssClass": "hotspot-circle", "id": "circle2", "createTooltipFunc": createHotspot, "createTooltipArgs": { id: "circle2" }},
                    { "pitch": 5, "yaw": 0, "type": "custom", "cssClass": "hotspot-circle", "id": "circle3", "createTooltipFunc": createHotspot, "createTooltipArgs": { id: "circle3" }},
                    { "pitch": 3, "yaw": -5, "type": "custom", "cssClass": "hotspot-circle", "id": "circle4", "createTooltipFunc": createHotspot, "createTooltipArgs": { id: "circle4" }},
                    { "pitch": 0, "yaw": 20, "type": "custom", "cssClass": "hotspot-circle", "id": "circle5", "createTooltipFunc": createHotspot, "createTooltipArgs": { id: "circle5" }},
                    { "pitch": 5, "yaw": 30, "type": "custom", "cssClass": "hotspot-circle", "id": "circle6", "createTooltipFunc": createHotspot, "createTooltipArgs": { id: "circle6" }},
                    {
                        "pitch": 10,
                        "yaw": -15,
                        "type": "custom",
                        "cssClass": "static-image",
                        "createTooltipFunc": createStaticImage,
                        "createTooltipArgs": {}
                    }
                ]
            });

            /* Fonction pour g√©rer les clics sur les cercles */
            function createHotspot(hotSpotDiv, args) {
                hotSpotDiv.setAttribute("id", args.id);

                // Ajouter un `span` pour afficher les num√©ros apr√®s validation
                let textSpan = document.createElement("span");
                textSpan.classList.add("circle-text");
                hotSpotDiv.appendChild(textSpan);

                hotSpotDiv.addEventListener("click", function () {
                    if (attemptDone) return; // Bloquer apr√®s un essai

                    let circleId = args.id;

                    if (clickedCircles.length < 2 && !clickedCircles.includes(circleId)) {
                        clickedCircles.push(circleId);
                    }

                    if (clickedCircles.length === 2) {
                        checkSelection();
                        attemptDone = true; // Bloquer apr√®s un essai
                    }
                });
            }

            /* V√©rifie si l'utilisateur a cliqu√© sur le bon ordre */
            function checkSelection() {
                highlightCorrectCircles(); // Toujours afficher les cercles verts + num√©ros

                if (clickedCircles[0] === "circle1" && clickedCircles[1] === "circle2") {
                    showMessage("Correct", "green");
                    updateEtape3(1);
                } else {
                    showMessage("Incorrect", "red");
                    updateEtape3(-1);
                }
            }

            /* Fonction pour afficher le message + changer la couleur des cercles */
            function showMessage(text, color) {
                let messageBox = document.getElementById("message-box");
                let responseImage = document.getElementById("response-image");
                let nextButton = document.getElementById("next-button");

                messageBox.textContent = text;
                messageBox.style.color = color;
                messageBox.style.fontSize = "30px";
                messageBox.style.fontWeight = "bold";
                messageBox.style.marginTop = "10px";
                messageBox.style.display = "block";

                responseImage.style.display = "block"; // Afficher l'image
                nextButton.style.display = "inline-block"; // Afficher le bouton

                reloadTable(); // üîÑ Mettre √† jour la colonne Validation apr√®s mise √† jour du score
            }

            /* ‚úÖ Met en vert les bons cercles et affiche "1" et "2" */
            function highlightCorrectCircles() {
                let circle1 = document.querySelector('[id="circle1"]');
                let circle2 = document.querySelector('[id="circle2"]');

                if (circle1) {
                    circle1.classList.add("correct-circle");
                    circle1.querySelector(".circle-text").textContent = "1"; // Ajoute le num√©ro 1 (pour la correction)
                }
                if (circle2) {
                    circle2.classList.add("correct-circle");
                    circle2.querySelector(".circle-text").textContent = "2"; // Ajoute le num√©ro 2 (pour la correction)
                }
            }

            /* Mise √† jour du score si l'utilisateur a bien cliqu√© */
            function updateEtape3(value) {
                fetch("{{ path('update_score') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    body: JSON.stringify({ etape: "etape3", value: value })
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log("Score mis √† jour :", data.score);
                        reloadTable(); // üîÑ Mettre √† jour la colonne Validation apr√®s mise √† jour du score
                    })
                    .catch(error => console.error("Erreur de mise √† jour du score :", error));
            }

            /* Fonction pour afficher l'image fixe */
            function createStaticImage(hotSpotDiv) {
                hotSpotDiv.classList.add('static-container');

                let image = document.createElement("img");
                image.src = "{{ asset('images/piquetMALT.png') }}";
                image.classList.add("piquet-image");
                hotSpotDiv.appendChild(image);
            }

        });
    </script>

    </body>

    <style>
        /* Cercles bleus vides */
        .hotspot-circle {
            width: 40px;
            height: 40px;
            border: 3px solid blue;
            background-color: transparent;
            border-radius: 50%;
            position: absolute;
            transform: translate(-50%, -50%);
            pointer-events: auto;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            font-weight: bold;
            color: black;
        }

        /* ‚úÖ Cercles corrects en vert */
        .correct-circle {
            border: 6px solid green !important;
            background-color: transparent !important;
        }

        /* ‚úÖ Num√©ros 1 et 2 affich√©s et centr√©s dans les cercles */
        .circle-text {
            position: absolute;
            font-size: 28px;
            font-weight: bold;
            color: black;
            width: 100%;
            text-align: center;
        }



        /* Style pour les cercles cliqu√©s */
        .hotspot-circle.clicked {
            background-color: blue !important; /* Remplit le cercle */
        }

        #panorama-container {
            position: relative;
            z-index: 1; /* Inf√©rieur √† l‚Äôimage de correction */
        }

        /* Superposition de l'image √† gauche sur le panorama */
        /* S'assurer que l'image de correction est bien positionn√©e au-dessus de l'image panoramique */
        .overlay-image {
            position: absolute;
            top: 35%; /* Ajuster la position verticale */
            left: 20%; /* Ajuster la position horizontale */
            transform: translate(-50%, -50%); /* Centre parfaitement */
            width: 400px;  /* Taille ajustable */
            max-width: 90%; /* √âvite que l'image d√©passe la largeur de l'√©cran */
            z-index: 10; /* S'assurer qu'elle est bien au-dessus du panorama */
            display: none;
            border: 2px solid black;
            background-color: white;
            padding: 10px;
            box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.5);
        }



        /* Conteneur de l‚Äôimage fixe */
        .static-container {
            position: absolute;
            transform-origin: center;
        }

        /* Image fixe plus grande */
        .piquet-image {
            width: 250px;
            height: auto;
        }

    </style>


{% endblock %}
