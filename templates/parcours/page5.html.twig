{% extends 'base.html.twig' %}

{% block title %}Parcours Page 5{% endblock %}

{% block content %}

    <script src="{{ asset('js/pannellum.js') }}"></script>
    <link rel="stylesheet" href="{{ asset('css/pannellum.css') }}">

    <body>
    <h1>Étape 5 : Sélectionner le point de vigilance à contrôler</h1>

    <div id="response-container">
        <span id="message-box"></span>
        <img id="response-image" src="{{ asset('images/DJbaché.jpg') }}" class="overlay-image" style="display: none;">
        <a href="{{ path('app_bilan') }}" id="next-button" class="next-button" style="display: none;">Voir le bilan</a>
        <!-- Bouton "Pas de problème sur cette image" -->
        <button id="no-problem-button" class="no-problem">Pas de problème sur cette image</button>
    </div>

    <div class="container">
        <div class="parcours-table-container">
            <div class="parcours-table-title">Suivi de la consignation</div>
            <table class="parcours-table">
                <tr>
                    <th>N°</th>
                    <th>Emplacement</th>
                    <th>Opération</th>
                    <th>Validation</th>
                </tr>
                {% for row in tableData %}
                    <tr>
                        <td>{{ row['N°'] }}</td>
                        <td>{{ row['Emplacement'] }}</td>
                        <td>{{ row['Opération'] }}</td>
                        <td class="validation">
                            {% set etapeKey = 'etape' ~ row['N°'] %}
                            {% if score[etapeKey] is defined %}
                                {% if score[etapeKey] == 1 %}
                                    ✅
                                {% elseif score[etapeKey] == -1 %}
                                    ❌
                                {% endif %}
                            {% endif %}
                        </td>
                    </tr>
                {% endfor %}
            </table>
        </div>

        <!-- Image panoramique -->
        <div id="panorama"></div>

        <!-- Champ de texte (invisible au départ) -->
        <div id="text-input-container">
            <p>Indiquer le nom de la vigilance :</p>
            <input type="text" id="user-input" placeholder="Votre réponse ici...">
            <button id="submit-button">Valider</button>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let isDragging = false;
            let attempted = false;
            let correctClick = false; // Vérifier si l'utilisateur a cliqué sur un hotspot valide

            let viewer = pannellum.viewer('panorama', {
                "type": "equirectangular",
                "panorama": "{{ asset('models/ArlodEntree.jpg') }}",
                "autoLoad": true,
                "yaw": -175,
                "pitch": -8,
                "hfov": 150,
                "mouseZoom": false,
                "disableZoom": true,
                "showControls": false,
                "keyboardZoom": false,
                "hotSpots": [
                    {
                        "pitch": -7,
                        "yaw": -173,
                        "type": "custom",
                        "cssClass": "hotspot-rect",
                        "createTooltipFunc": function(hotSpotDiv, args) {
                            hotSpotDiv.classList.add("hotspot-rect");
                            hotSpotDiv.style.pointerEvents = "auto";
                            hotSpotDiv.setAttribute("id", "feedback-frame");

                            hotSpotDiv.addEventListener("click", function (event) {
                                if (!isDragging && !attempted) {
                                    event.stopPropagation();
                                    correctClick = true; // Marque que l'utilisateur a bien cliqué sur le hotspot
                                    showPrompt(); // Ouvre le champ de saisie
                                }
                            });
                        }
                    }
                ]
            });

            // Gestion du clic utilisateur en dehors du hotspot
            document.getElementById("panorama").addEventListener("mousedown", function () {
                isDragging = false;
            });

            document.getElementById("panorama").addEventListener("mousemove", function () {
                isDragging = true;
            });

            document.getElementById("panorama").addEventListener("mouseup", function () {
                setTimeout(() => {
                    if (!isDragging && !attempted && !correctClick) {
                        attempted = true;
                        showPrompt();
                    }
                }, 100);
            });

            function showPrompt() {
                let textInputContainer = document.getElementById("text-input-container");
                textInputContainer.style.display = "block";

                document.getElementById("submit-button").onclick = function () {
                    validateResponse(correctClick);
                };
            }

            document.getElementById("no-problem-button").onclick = function () {
                if (!attempted) {
                    attempted = true;
                    validateResponse(false); // Mauvaise réponse forcée
                }
            };

            function validateResponse(isCorrect) {
                let textInputContainer = document.getElementById("text-input-container");
                let feedbackFrame = document.getElementById("feedback-frame");
                let messageBox = document.getElementById("message-box");
                let noProblemButton = document.getElementById("no-problem-button");

                attempted = true;
                textInputContainer.style.display = "none"; // Cacher le champ de texte
                noProblemButton.style.display = "none"; // Cacher le bouton après validation

                if (isCorrect) {
                    showMessage("Correct", "green");
                    updateEtape5(1);
                    feedbackFrame.style.border = "5px solid green"; // Affiche en vert
                } else {
                    showMessage("Incorrect", "red");
                    updateEtape5(-1);
                    feedbackFrame.style.border = "5px solid red"; // Affiche en rouge
                }

                feedbackFrame.style.display = "block";
                document.getElementById("next-button").style.display = "inline-block";
            }

            function showMessage(text, color) {
                let messageBox = document.getElementById("message-box");
                messageBox.textContent = text;
                messageBox.style.color = color;
                messageBox.style.fontSize = "30px";
                messageBox.style.fontWeight = "bold";
                messageBox.style.marginTop = "10px";
                messageBox.style.display = "block";

                reloadTable(); // Met à jour la validation
            }

            function updateEtape5(value) {
                fetch("{{ path('update_score') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    body: JSON.stringify({ etape: "etape5", value: value })
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log("Score mis à jour :", data.score);
                        reloadTable();  // Met à jour la validation
                    })
                    .catch(error => console.error("Erreur de mise à jour du score :", error));
            }
        });
    </script>

    <style>
        /* Champ de texte discret */
        #text-input-container {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.2);
            text-align: center;
        }

        #text-input-container p {
            font-weight: bold;
            margin-bottom: 5px;
        }

        #text-input-container input {
            width: 200px;
            padding: 5px;
            margin-right: 10px;
        }

        #text-input-container button {
            padding: 5px 10px;
            cursor: pointer;
        }

        /* Bouton "Pas de problème sur cette image" */
        .no-problem {
            display: block;
            margin: 15px auto;
            padding: 12px 18px;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            cursor: pointer;
            transition: 0.3s;
        }

        .no-problem:hover {
            background-color: rgba(0, 0, 0, 0.6);
        }

        .hotspot-rect {
            position: absolute;
            width: 100px;
            height: 100px;
            background: transparent;
            border: 3px solid transparent;
            pointer-events: none;
        }
    </style>

    </body>

{% endblock %}
