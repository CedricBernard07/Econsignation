{% extends 'base.html.twig' %}

{% block title %}Parcours{% endblock %}

{% block content %}

    <script src="{{ asset('js/pannellum.js') }}"></script>
    <link rel="stylesheet" href="{{ asset('css/pannellum.css') }}">

    <body>
    <h1>√âtape 1 : Cliquer sur le Transformateur</h1>

    <div id="response-container">
        <span id="message-box"></span>
        <a href="{{ path('app_page2') }}" id="next-button" class="next-button" style="display: none;">Passer √† l'√©tape suivante</a>
    </div>

{#    tableau repr√©senatnt la fiche de consignation#}
    <div class="container">
        <!-- Tableau des op√©rations -->
        <div class="parcours-table-container">
            <div class="parcours-table-title">Suivi de la consignation</div>
            <table class="parcours-table">
                <tr>
                    <th>N¬∞</th>
                    <th>Emplacement</th>
                    <th>Op√©ration</th>
                    <th>Validation</th>
                </tr>
                {% for row in tableData %}
                    <tr>
                        <td>{{ row['N¬∞'] }}</td>
                        <td>{{ row['Emplacement'] }}</td>
                        <td>{{ row['Op√©ration'] }}</td>
                        <td class="validation">
                            {% set etapeKey = 'etape' ~ row['N¬∞'] %} {# G√©n√®re "etape1", "etape2", etc. #}
                            {% if score[etapeKey] is defined %}
                                {% if score[etapeKey] == 1 %}
                                    ‚úÖ
                                {% elseif score[etapeKey] == -1 %}
                                    ‚ùå
                                {% endif %}
                            {% endif %}
                        </td>
                    </tr>
                {% endfor %}
            </table>
        </div>

        <!-- Image panoramique -->
        <div id="panorama"></div>
    </div>


    <script>
        //POP UP NNI
        document.addEventListener("DOMContentLoaded", function () {
            fetch('/session/get-nni')
                .then(response => response.json())
                .then(data => {
                    if (!data.nni) { // Aucun NNI en session, on demande un nouveau
                        let userNNI = prompt("Veuillez entrer votre NNI :");

                        if (userNNI === null || userNNI.trim() === "") {
                            // Si l'utilisateur annule ou entre une valeur vide, rediriger vers l'accueil
                            window.location.href = "/";
                        } else {
                            fetch(`/session/set-nni/${userNNI}`, { method: 'POST' })
                                .then(response => response.json())
                                .then(() => {
                                    fetch(`/db/check-nni/${userNNI}`)
                                        .then(response => response.json())
                                        .then(data => {
                                            if (!data.exists) {
                                                fetch(`/db/add-nni/${userNNI}`, { method: 'POST' });
                                            }
                                        });
                                });
                        }
                    }
                })
                .catch(error => console.error("Erreur de session :", error));
        });



        document.addEventListener("DOMContentLoaded", function () {
            let isDragging = false;
            let viewer = pannellum.viewer('panorama', {
                "type": "equirectangular",
                "panorama": "{{ asset('models/model.jpg') }}",
                "autoLoad": true,
                "yaw": 1.5,  // Ajuste la position horizontale du hotspot
                "pitch": 3,  // Ajuste la position verticale du hotspot
                "hfov": 100, // Angle de vue initial (fix√©)
                "mouseZoom": false,
                "disableZoom": true,
                "showControls": false,
                "keyboardZoom": false,
                "hotSpots": [
                    {
                        "pitch": 6.5,
                        "yaw": 4.5,
                        "type": "custom",
                        "cssClass": "hotspot-rect",
                        "createTooltipFunc": function(hotSpotDiv, args) {
                            hotSpotDiv.classList.add("hotspot-rect");
                            hotSpotDiv.style.pointerEvents = "auto";
                            hotSpotDiv.addEventListener("click", function(event) {
                                if (!isDragging) {
                                    event.stopPropagation();
                                    showMessage("Correct", "green");
                                    updateScore('etape1',1);
                                }
                                // Appliquer la correction : bordure verte
                                hotSpotDiv.style.border = "5px solid green"
                            });
                        }
                    }
                ]
            });

            function showMessage(text, color) {
                let messageBox = document.getElementById("message-box");
                let nextButton = document.getElementById("next-button");

                messageBox.textContent = text;
                messageBox.style.color = color;
                nextButton.style.display = "inline-block"; // Afficher le bouton

                reloadTable(); // üîÑ Mettre √† jour la colonne Validation apr√®s mise √† jour du score
            }

            function updateScore(etape, value) {
                fetch("{{ path('update_score') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    body: JSON.stringify({ etape: etape, value:value })
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log("Score mis √† jour :", data.score);
                        reloadTable(); // üîÑ Mettre √† jour la colonne Validation apr√®s mise √† jour du score
                    })
                    .catch(error => console.error("Erreur de mise √† jour du score :", error));
            }

            document.getElementById("panorama").addEventListener("mousedown", function () {
                isDragging = false;
            });

            document.getElementById("panorama").addEventListener("mousemove", function () {
                isDragging = true;
            });

            document.getElementById("panorama").addEventListener("mouseup", function () {
                if (!isDragging) {
                    showMessage("Incorrect", "red");
                    updateScore('etape1',-1);
                    // Appliquer la correction : bordure rouge
                    let hotSpotDiv = document.querySelector(".hotspot-rect");
                    hotSpotDiv.style.border = "5px solid red"
                }
            });
        });
    </script>

    <style>
        .hotspot-rect {
            position: absolute;
            width: 150px;
            height: 150px;
            background: transparent;
            border: 3px solid transparent; /* Bordure invisible au depart */
            pointer-events: auto;
            cursor: grab;
        }
    </style>


    </body>

{% endblock %}
