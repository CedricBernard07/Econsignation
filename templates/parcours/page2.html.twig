{% extends 'base.html.twig' %}

{% block title %}Parcours Page 2{% endblock %}

{% block content %}

    <script src="{{ asset('js/pannellum.js') }}"></script>
    <link rel="stylesheet" href="{{ asset('css/pannellum.css') }}">

    <body>
    <h1>√âtape 2 : S√©lectionner les EPI adapt√©s pour la manipulation</h1>

    <div id="response-container">
        <span id="message-box"></span>
        <a href="{{ path('app_page3') }}" id="next-button" class="next-button" style="display: none;">Passer √† l'√©tape suivante</a>
    </div>

    {#    tableau repr√©senatnt la fiche de consignation#}
    <div class="container">
        <!-- Tableau des op√©rations -->
        <div class="parcours-table-container">
            <div class="parcours-table-title">Suivi de la consignation</div>
            <table class="parcours-table">
                <tr>
                    <th>N¬∞</th>
                    <th>Emplacement</th>
                    <th>Op√©ration</th>
                    <th>Validation</th>
                </tr>
                {% for row in tableData %}
                    <tr>
                        <td>{{ row['N¬∞'] }}</td>
                        <td>{{ row['Emplacement'] }}</td>
                        <td>{{ row['Op√©ration'] }}</td>
                        <td class="validation">
                            {% set etapeKey = 'etape' ~ row['N¬∞'] %} {# G√©n√®re "etape1", "etape2", etc. #}
                            {% if score[etapeKey] is defined %}
                                {% if score[etapeKey] == 1 %}
                                    ‚úÖ
                                {% elseif score[etapeKey] == -1 %}
                                    ‚ùå
                                {% endif %}
                            {% endif %}
                        </td>
                    </tr>
                {% endfor %}
            </table>
        </div>

        <!-- Image panoramique -->
        <div id="panorama"></div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let hasClicked = false; // Emp√™cher plusieurs clics

            let viewer = pannellum.viewer('panorama', {
                "type": "equirectangular",
                "panorama": "{{ asset('models/model.jpg') }}",
                "autoLoad": true,
                "yaw": 0,
                "pitch": 0,
                "hfov": 100,
                "hotSpots": [
                    {
                        "pitch": -10,
                        "yaw": -20,
                        "type": "custom",
                        "cssClass": "hotspot-img",
                        "createTooltipFunc": function(hotSpotDiv, args) {
                            hotSpotDiv.classList.add("hotspot-img", "correct-choice");
                            hotSpotDiv.style.backgroundImage = "url('{{ asset('images/EPI/correct.png') }}')";
                            hotSpotDiv.style.width = "80px";
                            hotSpotDiv.style.height = "80px";
                            hotSpotDiv.addEventListener("click", function () {
                                if (!hasClicked) {
                                    showMessage("Correct", "green");
                                    showBorders(); // Afficher les bordures
                                    updateEtape2(1);
                                    hasClicked = true;
                                }
                            });
                        }
                    },
                    {
                        "pitch": -10,
                        "yaw": 20,
                        "type": "custom",
                        "cssClass": "hotspot-img",
                        "createTooltipFunc": function(hotSpotDiv, args) {
                            hotSpotDiv.classList.add("hotspot-img", "incorrect-choice");
                            hotSpotDiv.style.backgroundImage = "url('{{ asset('images/EPI/incorrect.png') }}')";
                            hotSpotDiv.style.width = "80px";
                            hotSpotDiv.style.height = "80px";
                            hotSpotDiv.addEventListener("click", function () {
                                if (!hasClicked) {
                                    showMessage("Incorrect", "red");
                                    showBorders(); // Afficher les bordures
                                    updateEtape2(-1);
                                    hasClicked = true;
                                }
                            });
                        }
                    }
                ]
            });

            function showMessage(text, color) {
                let messageBox = document.getElementById("message-box");
                let nextButton = document.getElementById("next-button");

                messageBox.textContent = text;
                messageBox.style.color = color;
                nextButton.style.display = "block"; // Afficher le bouton suivant

                reloadTable(); // üîÑ Mettre √† jour la colonne Validation apr√®s mise √† jour du score
            }

            function updateEtape2(value) {
                fetch("{{ path('update_score') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    body: JSON.stringify({ etape: "etape2", value: value })
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log("Score mis √† jour :", data.score);
                        reloadTable(); // üîÑ Mettre √† jour la colonne Validation apr√®s mise √† jour du score
                    })
                    .catch(error => console.error("Erreur de mise √† jour du score :", error));
            }

            function showBorders() {
                // Ajouter la bordure verte √† l'image correcte
                document.querySelector(".correct-choice").classList.add("correct-answer");

                // Ajouter la bordure rouge √† l'image incorrecte
                document.querySelector(".incorrect-choice").classList.add("incorrect-answer");
            }
        });
    </script>



    </body>

    <style>
        .hotspot-img {
            width: 200px !important; /* Taille ajust√©e pour √©viter le recadrage */
            height: 200px !important;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .hotspot-img:hover {
            transform: scale(1.1); /* Effet de zoom au survol */
        }

        /* Bordure verte pour la bonne r√©ponse */
        .correct-answer {
            border: 5px solid green !important;
            border-radius: 10px;
        }

        /* Bordure rouge pour la mauvaise r√©ponse */
        .incorrect-answer {
            border: 5px solid red !important;
            border-radius: 10px;
        }



    </style>

{% endblock %}
