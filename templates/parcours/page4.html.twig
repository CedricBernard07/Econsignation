{% extends 'base.html.twig' %}

{% block title %}Parcours Page 4{% endblock %}

{% block content %}

    <script src="{{ asset('js/pannellum.js') }}"></script>
    <link rel="stylesheet" href="{{ asset('css/pannellum.css') }}">

    <body>
    <h1>√âtape 4 : Culture g√©n√©rale sur les postes sources</h1>

    <div id="response-container">
        <span id="message-box"></span>
        <a href="{{ path('app_bilan') }}" id="next-button" class="next-button" style="display: none;">Voir le bilan</a>
    </div>

    <div id="panorama" style="width: 100%; height: 800px;"></div>

    <!-- Question en surcouche -->
    <div id="question-box" class="overlay-box">
        <h2>Quelle est la fonction principale d'un poste source ?</h2>
        <button class="answer-button" data-answer="wrong">A) Produire de l'√©lectricit√©</button>
        <button class="answer-button" data-answer="wrong">B) Transporter l'√©lectricit√© aux consommateurs</button>
        <button class="answer-button" data-answer="correct">C) Abaisser la tension pour la distribution locale</button>
        <button class="answer-button" data-answer="wrong">D) Stocker l'√©lectricit√© pour une utilisation ult√©rieure</button>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let viewer = pannellum.viewer('panorama', {
                "type": "equirectangular",
                "panorama": "{{ asset('models/model.jpg') }}",
                "autoLoad": true,
                "yaw": 0,
                "pitch": 0,
                "hfov": 100,
                "mouseZoom": false,
                "disableZoom": true,
                "showControls": false,
                "keyboardZoom": false
            });

            let buttons = document.querySelectorAll(".answer-button");
            let nextButton = document.getElementById("next-button");

            buttons.forEach(button => {
                button.addEventListener("click", function () {
                    let answer = this.getAttribute("data-answer");

                    // D√©sactiver tous les boutons apr√®s le clic
                    buttons.forEach(btn => {
                        btn.disabled = true;
                        btn.classList.add("disabled-answer");
                    });

                    // Mettre en surbrillance le bouton cliqu√©
                    this.classList.add("selected-answer");

                    // Afficher la bonne r√©ponse en vert
                    let correctButton = document.querySelector('[data-answer="correct"]');
                    correctButton.classList.add("correct-answer");

                    if (answer === "correct") {
                        showMessage("Correct", "green");
                        updateEtape4();
                    } else {
                        showMessage("Incorrect", "red");
                    }

                    // Afficher le bouton "Voir le bilan"
                    nextButton.style.display = "inline-block";
                });
            })

            /* Fonction pour afficher un message */
            function showMessage(text, color) {
                let messageBox = document.getElementById("message-box");
                messageBox.textContent = text;
                messageBox.style.color = color;
                messageBox.style.fontSize = "24px";
                messageBox.style.fontWeight = "bold";
                messageBox.style.marginTop = "10px";
                messageBox.style.display = "block";
            }

            /* Mise √† jour du score */
            function updateEtape4() {
                fetch("{{ path('update_score') }}", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    body: JSON.stringify({ etape: "etape4" }) // Mise √† jour de l'√©tape 4
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log("Score mis √† jour :", data.score);
                    })
                    .catch(error => console.error("Erreur de mise √† jour du score :", error));
            }
        });
    </script>

    </body>

    <style>
        /* Bo√Æte de question en surcouche */
        .overlay-box {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 600px;
            height: auto;
            min-height: 200px;
            background: white;
            border: 2px solid black;
            padding: 20px;
            text-align: center;
            box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.5);
            z-index: 100;
        }

        /* Style des boutons de r√©ponse */
        .answer-button {
            display: block;
            width: 100%;
            margin: 10px 0;
            padding: 10px;
            font-size: 18px;
            cursor: pointer;
            background-color: lightgray;
            border: none;
            border-radius: 5px;
        }

        .answer-button:hover {
            background-color: darkgray;
        }


        /* Bouton s√©lectionn√© *!*/
        .selected-answer {
            background-color: darkgray !important;
            font-weight: bold;
        }

        /* Bonne r√©ponse en vert */
        .correct-answer {
            background-color: green !important;
            color: white;
            font-weight: bold;
        }
    </style>

    {#-------------------------------------------------------#}
    {#  SECONDAIRE  emp√™cher le clic droit mene sur Pannellum#}
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let panoramaElement = document.getElementById("panorama");

            // Bloquer compl√®tement le menu contextuel Panellum
            document.addEventListener("contextmenu", function (event) {
                if (event.target.closest("#panorama")) {
                    event.preventDefault();
                }
            });

            // V√©rifier et supprimer le lien contextuel Panellum apr√®s son chargement
            function removePannellumContextMenu() {
                let pannellumMenu = document.querySelector(".pnlm-about-msg");
                if (pannellumMenu) {
                    pannellumMenu.remove(); // üîπ Supprime l'√©l√©ment affichant le lien Panellum
                }
            }

            // Attendre le chargement de Panellum et supprimer le menu
            setTimeout(removePannellumContextMenu, 500); // üîπ D√©lai pour s'assurer que Panellum est bien charg√©

            // Surveiller les changements de DOM pour d√©tecter si Panellum r√©affiche son menu
            let observer = new MutationObserver(removePannellumContextMenu);
            observer.observe(document.body, { childList: true, subtree: true });

            // D√©sactiver tous les √©v√©nements li√©s au menu contextuel
            panoramaElement.addEventListener("mousedown", function (event) {
                if (event.button === 2) { // Clic droit
                    event.preventDefault();
                }
            });

            panoramaElement.addEventListener("mouseup", function (event) {
                if (event.button === 2) {
                    event.preventDefault();
                }
            });
        });
    </script>

{% endblock %}
