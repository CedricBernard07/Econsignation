{% extends 'base.html.twig' %}

{% block title %}Visualisation 3D{% endblock %}

{% block content %}


    <div id="3d-wrapper">
        <div id="3d-container">
            <canvas id="three-canvas"></canvas>
        </div>
    </div>

    <!-- ✅ Bulles de texte -->
    <div id="bubble1" class="bubble">Bulle 1</div>
    <div id="bubble2" class="bubble">Bulle 2</div>
    <div id="bubble3" class="bubble">Bulle 3</div>

    <style>
        /* ✅ Garder le menu toujours visible */
        #menu-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background: rgba(255, 255, 255, 0.9);
            padding: 10px 0;
            text-align: center;
            z-index: 3;
        }


        /* ✅ Contenir le modèle 3D dans un cadre */
        #3d-wrapper {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: calc(100vh - 80px);
            margin-top: 80px;
        }

        #3d-container {
            width: 80vw;
            height: 70vh;
            border: 2px solid black;
            position: relative;
            background-color: #000;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        canvas {
            width: 100% !important;
            height: 100% !important;
            display: block;
        }
    </style>

    <script src="https://cdn.jsdelivr.net/npm/three@0.136/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.136/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.136/examples/js/controls/OrbitControls.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer({ antialias: true, canvas: document.getElementById('three-canvas') });

            function resizeRenderer() {
                const container = document.getElementById('3d-container');
                renderer.setSize(container.clientWidth, container.clientHeight);
                camera.aspect = container.clientWidth / container.clientHeight;
                camera.updateProjectionMatrix();
            }

            resizeRenderer();
            window.addEventListener("resize", resizeRenderer);

            const light = new THREE.DirectionalLight(0xffffff, 2);
            light.position.set(10, 10, 10);
            scene.add(light);

            const ambientLight = new THREE.AmbientLight(0x404040, 3);
            scene.add(ambientLight);

            const controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.minDistance = 1;
            controls.maxDistance = 100;
            controls.update();

            const loader = new THREE.GLTFLoader();
            loader.load('/models/model.glb', function (gltf) {
                const model = gltf.scene;
                scene.add(model);
                model.scale.set(10, 10, 10);

                const box = new THREE.Box3().setFromObject(model);
                const center = box.getCenter(new THREE.Vector3());
                const size = box.getSize(new THREE.Vector3());

                camera.position.set(center.x, center.y, size.z * 2);
                camera.lookAt(center);
            }, undefined, function (error) {
                console.error('Erreur de chargement du modèle', error);
            });

            function animate() {
                requestAnimationFrame(animate);
                controls.update();
                renderer.render(scene, camera);
            }
            animate();
        });
    </script>
{% endblock %}